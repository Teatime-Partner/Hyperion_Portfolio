body {
  background-color: rgb(34, 32, 48);
}

h1 {
  margin: 20px auto;
  padding: 5px;
  padding-bottom: 20px;
  text-align: center;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  color: aliceblue;
}

/*Create grid containet ro contain all rows and collumns, specity 19 collumns to fit all elements on the grid, 1fr= one fraction of the available space, 
scalling automatically with the available space on the screen
repeat function ensures 1fr column width is applied 19 times

.grid-container {
  display: grid;
  grid-template-columns: repeat(18, minmax(20px, 1fr));
  grid-template-rows: repeat(9, 75px);
  gap: 0.2rem;
  margin: 0px auto;
  padding: 0px;
  justify-content: center;
}
*/

/* set up three breakpoints for different displays
min-width 300px for the smallest displays, ensure that img is set to display, grid-container display to none to hide the grid*/

@media (min-width: 300px) {
  .grid-container {
    display: none;
  }
  img {
    display: block;
    max-width: 550px;
    height: auto;
  }
}

/*min-width 600px is the medium value where the table is still not fully fleshed out but it contains more information, 
img display none to hide from showing, .name to hide the full name of the element*/
@media (min-width: 600px) {
  .grid-container {
    display: grid;
    /* repeat repeats the collumn, minmax function makes it scallable to display between specified values*/
    grid-template-columns: repeat(18, minmax(20px, 50px));
    grid-template-rows: repeat(9, 75px);
    gap: 3px;
    margin: 0px auto;
    padding: 0px;
  }
  .grid-container .name {
    display: none;
  }
  img {
    display: none;
  }
}

/* third breakpoint at 1000px, set .name to display to override the previous display:none, img stays display:none and is not displayed
minmax value scalles up to 1fr - 1 unit of available space for column width*/
@media (min-width: 1000px) {
  .grid-container {
    display: grid;
    grid-template-columns: repeat(18, minmax(50px, 1fr));
    grid-template-rows: repeat(9, 75px);
    gap: 3px;
    margin: 20px auto;
    padding: 0px;
    /*max-width specifies upper size of the whole container so columns are not floating throught he whole available screen space but are contained to the max value below*/
    max-width: 1600px;
  }
  .grid-container .name {
    display: contents;
  }
  img {
    display: none;
  }
}

/* global settings for all the div tag inside the grid*/
.grid-container div {
  border: 1px solid black;
  padding: 1px;
  /* width: 65px;*/
  padding-bottom: 10px;
  text-align: center;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
}

/* display settings for text inside each cell with periodic table element*/
/* double class specification for .number and .symbol class elements required to ovverride global settings specified in .grid-container div above (padding 5px over the element)*/
.grid-container .number {
  text-align: left;
  padding-bottom: 5px;
  font-size: x-small;
  margin: 2px;
}

.grid-container .symbol {
  font-weight: bold;
  padding-bottom: 8px;
  font-size: 1.1rem;
}
.name {
  color: aliceblue;
  font-size: x-small;
}

/*settings for display for elements in specific chemical groups*/
.non-metal {
  background-color: rgb(107, 178, 190);
}

.gas {
  background-color: rgb(131, 61, 82);
}

.alkali {
  background-color: rgb(138, 81, 64);
}

.earth {
  background-color: rgb(110, 87, 57);
}

.metalloid {
  background-color: rgb(182, 177, 107);
}
.post {
  background-color: rgb(72, 116, 43);
}
.metal {
  background-color: rgb(87, 79, 138);
}
.lanth {
  background-color: rgb(141, 155, 180);
}

.acti {
  background-color: rgb(81, 64, 92);
}

/*specify the margins and padding for all p tags in the grid to display without breaks vertically*/
.grid-container p {
  padding: 0px;
  margin: 0px;
}

/*set up the visual style legend for clarity*/
.legend {
  padding: 30px;
  margin: 30px 30px 100px 50px;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  background-color: rgb(212, 216, 218);
  max-width: 1400px;
  border-radius: 20px;
  box-shadow: 5px 5px 10px rgb(17, 26, 32);
}

#legend-label {
  font-size: 24px;
  font-style: italic;
  padding: 10px;
  margin: 0;
}

.square {
  max-height: 50px;
  width: 150px;
}

/*set a flex container that changes the display of div elements inside, makins gure they are centered and don't overflow the container*/
.legend-container {
  overflow: hidden;
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
}

.legend-container div {
  margin: 3px;
  font-size: 12px;
  color: aliceblue;
  text-align: center;
  padding: 10px 0;
  box-shadow: 5px 5px 10px rgb(97, 100, 102);
}

/*positioning of elements on the grid - DO IT LAST AS IT WILL TAKE OVER TONS OF LINES*/
/*define position of all columns on the grid - it is much easier to have this as all position listed out in this format instead of trying to determine all elements by their ID
below saves a lot of coding time as all that's needed is specifying additional class in the tag instead of individually formatting each div in css*/
.pos1 {
  grid-column: 1;
}
.pos2 {
  grid-column: 2;
}
.pos3 {
  grid-column: 3;
}
.pos4 {
  grid-column: 4;
}
.pos5 {
  grid-column: 5;
}
.pos6 {
  grid-column: 6;
}
.pos7 {
  grid-column: 7;
}
.pos8 {
  grid-column: 8;
}
.pos9 {
  grid-column: 9;
}
.pos10 {
  grid-column: 10;
}
.pos11 {
  grid-column: 11;
}
.pos12 {
  grid-column: 12;
}
.pos13 {
  grid-column: 13;
}
.pos14 {
  grid-column: 14;
}
.pos15 {
  grid-column: 15;
}
.pos16 {
  grid-column: 16;
}
.pos17 {
  grid-column: 17;
}
.pos18 {
  grid-column: 18;
}

/* define position of all rows on the grid*/
.row1 {
  grid-row: 1;
}
.row2 {
  grid-row: 2;
}
.row3 {
  grid-row: 3;
}
.row4 {
  grid-row: 4;
}
.row5 {
  grid-row: 5;
}
.row6 {
  grid-row: 6;
}
.row7 {
  grid-row: 7;
}
.row8 {
  grid-row: 8;
}
.row9 {
  grid-row: 9;
}
